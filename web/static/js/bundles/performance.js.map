{
  "version": 3,
  "sources": ["../performance.js"],
  "sourcesContent": ["/**\r\n * CORA Performance Optimization Suite\r\n * \r\n * This module provides comprehensive performance optimizations for the CORA wellness experience:\r\n * - Critical CSS inlining and optimization\r\n * - Intelligent lazy loading\r\n * - Image optimization and WebP support\r\n * - Performance monitoring and analytics\r\n * - Resource preloading and caching\r\n * - Accessibility performance enhancements\r\n */\r\n\r\nclass CORAPerformance {\r\n    constructor() {\r\n        this.performanceMetrics = {\r\n            firstContentfulPaint: 0,\r\n            largestContentfulPaint: 0,\r\n            cumulativeLayoutShift: 0,\r\n            firstInputDelay: 0,\r\n            timeToInteractive: 0\r\n        };\r\n        \r\n        this.observers = new Map();\r\n        this.preloadQueue = [];\r\n        this.criticalResources = new Set();\r\n        \r\n        this.init();\r\n    }\r\n    \r\n    init() {\r\n        // Start performance monitoring immediately\r\n        this.startPerformanceMonitoring();\r\n        \r\n        // Initialize critical optimizations\r\n        this.optimizeCriticalCSS();\r\n        this.setupLazyLoading();\r\n        this.optimizeImages();\r\n        this.setupResourcePreloading();\r\n        this.optimizeFonts();\r\n        this.setupServiceWorker();\r\n        \r\n        // Setup intersection observers for performance\r\n        this.setupIntersectionObservers();\r\n        \r\n        // Monitor for performance issues\r\n        this.monitorPerformanceIssues();\r\n    }\r\n    \r\n    /**\r\n     * Performance Monitoring\r\n     */\r\n    startPerformanceMonitoring() {\r\n        // Monitor Core Web Vitals\r\n        if ('PerformanceObserver' in window) {\r\n            // First Contentful Paint\r\n            const fcpObserver = new PerformanceObserver((list) => {\r\n                const entries = list.getEntries();\r\n                entries.forEach(entry => {\r\n                    this.performanceMetrics.firstContentfulPaint = entry.startTime;\r\n                    this.logPerformanceMetric('FCP', entry.startTime);\r\n                });\r\n            });\r\n            fcpObserver.observe({ entryTypes: ['paint'] });\r\n            \r\n            // Largest Contentful Paint\r\n            const lcpObserver = new PerformanceObserver((list) => {\r\n                const entries = list.getEntries();\r\n                const lastEntry = entries[entries.length - 1];\r\n                this.performanceMetrics.largestContentfulPaint = lastEntry.startTime;\r\n                this.logPerformanceMetric('LCP', lastEntry.startTime);\r\n            });\r\n            lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });\r\n            \r\n            // Cumulative Layout Shift\r\n            const clsObserver = new PerformanceObserver((list) => {\r\n                let clsValue = 0;\r\n                for (const entry of list.getEntries()) {\r\n                    if (!entry.hadRecentInput) {\r\n                        clsValue += entry.value;\r\n                    }\r\n                }\r\n                this.performanceMetrics.cumulativeLayoutShift = clsValue;\r\n                this.logPerformanceMetric('CLS', clsValue);\r\n            });\r\n            clsObserver.observe({ entryTypes: ['layout-shift'] });\r\n            \r\n            // First Input Delay\r\n            const fidObserver = new PerformanceObserver((list) => {\r\n                const entries = list.getEntries();\r\n                entries.forEach(entry => {\r\n                    this.performanceMetrics.firstInputDelay = entry.processingStart - entry.startTime;\r\n                    this.logPerformanceMetric('FID', this.performanceMetrics.firstInputDelay);\r\n                });\r\n            });\r\n            fidObserver.observe({ entryTypes: ['first-input'] });\r\n        }\r\n        \r\n        // Monitor Time to Interactive\r\n        this.measureTimeToInteractive();\r\n    }\r\n    \r\n    /**\r\n     * Critical CSS Optimization\r\n     */\r\n    optimizeCriticalCSS() {\r\n        // Inline critical CSS for above-the-fold content\r\n        const criticalStyles = `\r\n            /* Critical rendering styles */\r\n            body { \r\n                margin: 0; \r\n                font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;\r\n                background: linear-gradient(135deg, #FFF9F0 0%, white 100%);\r\n                min-height: 100vh;\r\n            }\r\n            \r\n            /* Critical wellness components */\r\n            .wellness-card {\r\n                background: white;\r\n                border-radius: 24px;\r\n                padding: 2rem;\r\n                box-shadow: 0 8px 32px rgba(155, 110, 200, 0.1);\r\n                border: 2px solid transparent;\r\n                transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\r\n                position: relative;\r\n                overflow: hidden;\r\n            }\r\n            \r\n            /* Critical navigation */\r\n            nav {\r\n                background: white;\r\n                box-shadow: 0 1px 3px rgba(0,0,0,0.1);\r\n            }\r\n            \r\n            /* Critical form elements */\r\n            input, button {\r\n                font-family: inherit;\r\n            }\r\n            \r\n            /* Critical responsive utilities */\r\n            @media (max-width: 768px) {\r\n                .wellness-card {\r\n                    padding: 1.5rem;\r\n                }\r\n            }\r\n            \r\n            .wellness-btn {\r\n                display: inline-flex;\r\n                align-items: center;\r\n                justify-content: center;\r\n                padding: 1rem 2rem;\r\n                border: none;\r\n                border-radius: 16px;\r\n                font-size: 1rem;\r\n                font-weight: 600;\r\n                cursor: pointer;\r\n                transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\r\n                background: linear-gradient(135deg, #9B6EC8, #68D89B);\r\n                color: white;\r\n            }\r\n            \r\n            /* Loading skeleton */\r\n            .skeleton {\r\n                background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);\r\n                background-size: 200% 100%;\r\n                animation: shimmer 1.5s infinite;\r\n            }\r\n            \r\n            @keyframes shimmer {\r\n                0% { background-position: -200px 0; }\r\n                100% { background-position: calc(200px + 100%) 0; }\r\n            }\r\n        `;\r\n        \r\n        // Inject critical CSS\r\n        const style = document.createElement('style');\r\n        style.textContent = criticalStyles;\r\n        document.head.insertBefore(style, document.head.firstChild);\r\n        \r\n        // Preload non-critical CSS (wellness.css disabled for construction theme)\r\n        // this.preloadResource('/static/css/wellness.css', 'style');\r\n    }\r\n    \r\n    /**\r\n     * Intelligent Lazy Loading\r\n     */\r\n    setupLazyLoading() {\r\n        // Lazy load images with intersection observer\r\n        if ('IntersectionObserver' in window) {\r\n            const imageObserver = new IntersectionObserver((entries, observer) => {\r\n                entries.forEach(entry => {\r\n                    if (entry.isIntersecting) {\r\n                        const img = entry.target;\r\n                        this.loadImage(img);\r\n                        observer.unobserve(img);\r\n                    }\r\n                });\r\n            }, {\r\n                rootMargin: '50px 0px',\r\n                threshold: 0.01\r\n            });\r\n            \r\n            // Observe all images with data-src\r\n            document.querySelectorAll('img[data-src]').forEach(img => {\r\n                imageObserver.observe(img);\r\n            });\r\n        }\r\n        \r\n        // Lazy load components\r\n        this.setupComponentLazyLoading();\r\n    }\r\n    \r\n    /**\r\n     * Image Optimization\r\n     */\r\n    optimizeImages() {\r\n        // Convert images to WebP if supported\r\n        if (this.supportsWebP()) {\r\n            this.convertImagesToWebP();\r\n        }\r\n        \r\n        // Optimize image loading\r\n        document.querySelectorAll('img').forEach(img => {\r\n            // Add loading=\"lazy\" for images below the fold\r\n            if (!this.isAboveTheFold(img)) {\r\n                img.loading = 'lazy';\r\n            }\r\n            \r\n            // Add decoding=\"async\" for better performance\r\n            img.decoding = 'async';\r\n            \r\n            // Add error handling\r\n            img.addEventListener('error', () => {\r\n                this.handleImageError(img);\r\n            });\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * Resource Preloading\r\n     */\r\n    setupResourcePreloading() {\r\n        // Preload critical resources\r\n        const criticalResources = [\r\n            // { href: '/static/css/wellness.css', as: 'style' }, // Disabled for construction theme\r\n            { href: 'https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap', as: 'style' },\r\n            { href: '/static/images/logos/cora-logo.png', as: 'image' }\r\n        ];\r\n        \r\n        criticalResources.forEach(resource => {\r\n            this.preloadResource(resource.href, resource.as);\r\n        });\r\n        \r\n        // Prefetch likely resources\r\n        this.prefetchLikelyResources();\r\n    }\r\n    \r\n    /**\r\n     * Font Optimization\r\n     */\r\n    optimizeFonts() {\r\n        // Disabled font preloading to prevent unused resource warnings\r\n        // TODO: Implement proper font optimization with actual usage tracking\r\n        console.log('Font optimization disabled - using standard font loading');\r\n        \r\n        // Optimize font display for existing font links\r\n        document.querySelectorAll('link[href*=\"fonts.googleapis.com\"]').forEach(link => {\r\n            link.setAttribute('media', 'print');\r\n            link.setAttribute('onload', \"this.media='all'\");\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * Service Worker Setup\r\n     */\r\n    setupServiceWorker() {\r\n        if ('serviceWorker' in navigator) {\r\n            window.addEventListener('load', () => {\r\n                navigator.serviceWorker.register('/static/js/sw.js')\r\n                    .then(registration => {\r\n                        console.log('SW registered: ', registration);\r\n                        // Check for updates periodically\r\n                        setInterval(() => {\r\n                            registration.update();\r\n                        }, 60000); // Check every minute\r\n                    })\r\n                    .catch(registrationError => {\r\n                        console.log('SW registration failed: ', registrationError);\r\n                        // Service worker not critical, app continues to work\r\n                    });\r\n            });\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Intersection Observers for Performance\r\n     */\r\n    setupIntersectionObservers() {\r\n        // Observe components for performance optimization\r\n        const componentObserver = new IntersectionObserver((entries) => {\r\n            entries.forEach(entry => {\r\n                if (entry.isIntersecting) {\r\n                    this.optimizeComponent(entry.target);\r\n                }\r\n            });\r\n        }, { threshold: 0.1 });\r\n        \r\n        // Observe wellness cards and other components\r\n        document.querySelectorAll('.wellness-card, .feature-card, .stat-card').forEach(component => {\r\n            componentObserver.observe(component);\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * Performance Issue Monitoring\r\n     */\r\n    monitorPerformanceIssues() {\r\n        // Monitor for slow loading resources\r\n        const resourceObserver = new PerformanceObserver((list) => {\r\n            list.getEntries().forEach(entry => {\r\n                if (entry.duration > 3000) { // 3 seconds threshold\r\n                    this.reportSlowResource(entry);\r\n                }\r\n            });\r\n        });\r\n        resourceObserver.observe({ entryTypes: ['resource'] });\r\n        \r\n        // Monitor for layout shifts\r\n        const layoutShiftObserver = new PerformanceObserver((list) => {\r\n            list.getEntries().forEach(entry => {\r\n                if (entry.value > 0.1) { // CLS threshold\r\n                    this.reportLayoutShift(entry);\r\n                }\r\n            });\r\n        });\r\n        layoutShiftObserver.observe({ entryTypes: ['layout-shift'] });\r\n    }\r\n    \r\n    /**\r\n     * Utility Methods\r\n     */\r\n    preloadResource(href, as) {\r\n        const link = document.createElement('link');\r\n        link.rel = 'preload';\r\n        link.href = href;\r\n        link.as = as;\r\n        document.head.appendChild(link);\r\n    }\r\n    \r\n    loadImage(img) {\r\n        const src = img.dataset.src;\r\n        if (src) {\r\n            img.src = src;\r\n            img.removeAttribute('data-src');\r\n            img.classList.remove('lazy');\r\n        }\r\n    }\r\n    \r\n    supportsWebP() {\r\n        const canvas = document.createElement('canvas');\r\n        canvas.width = 1;\r\n        canvas.height = 1;\r\n        return canvas.toDataURL('image/webp').indexOf('data:image/webp') === 0;\r\n    }\r\n    \r\n    convertImagesToWebP() {\r\n        // Disabled WebP conversion to prevent 404 errors\r\n        // TODO: Add WebP versions of images or implement proper fallback\r\n        console.log('WebP conversion disabled - using original image formats');\r\n    }\r\n    \r\n    isAboveTheFold(element) {\r\n        const rect = element.getBoundingClientRect();\r\n        return rect.top < window.innerHeight;\r\n    }\r\n    \r\n    handleImageError(img) {\r\n        // Fallback to original format or placeholder\r\n        if (img.src.includes('.webp')) {\r\n            img.src = img.src.replace('.webp', '.png');\r\n        } else {\r\n            img.src = '/static/images/placeholder.svg';\r\n        }\r\n    }\r\n    \r\n    setupComponentLazyLoading() {\r\n        // Lazy load non-critical components\r\n        const components = document.querySelectorAll('[data-lazy-component]');\r\n        const componentObserver = new IntersectionObserver((entries) => {\r\n            entries.forEach(entry => {\r\n                if (entry.isIntersecting) {\r\n                    this.loadComponent(entry.target);\r\n                    componentObserver.unobserve(entry.target);\r\n                }\r\n            });\r\n        });\r\n        \r\n        components.forEach(component => {\r\n            componentObserver.observe(component);\r\n        });\r\n    }\r\n    \r\n    loadComponent(component) {\r\n        const componentType = component.dataset.lazyComponent;\r\n        // Load component based on type\r\n        switch (componentType) {\r\n            case 'chart':\r\n                this.loadChartComponent(component);\r\n                break;\r\n            case 'table':\r\n                this.loadTableComponent(component);\r\n                break;\r\n            case 'form':\r\n                this.loadFormComponent(component);\r\n                break;\r\n        }\r\n    }\r\n    \r\n    optimizeComponent(component) {\r\n        // Apply performance optimizations to components\r\n        // Only use will-change during actual animations\r\n        const animationHandler = () => {\r\n            component.style.willChange = 'transform';\r\n            component.addEventListener('transitionend', () => {\r\n                component.style.willChange = 'auto';\r\n            }, { once: true });\r\n        };\r\n        \r\n        // Apply on hover/focus for better performance\r\n        component.addEventListener('mouseenter', animationHandler);\r\n        component.addEventListener('focus', animationHandler);\r\n    }\r\n    \r\n    prefetchLikelyResources() {\r\n        // Prefetch resources that are likely to be needed\r\n        const likelyResources = [\r\n            '/dashboard',\r\n            '/expenses',\r\n            '/reports'\r\n        ];\r\n        \r\n        // Prefetch after page load\r\n        window.addEventListener('load', () => {\r\n            setTimeout(() => {\r\n                likelyResources.forEach(resource => {\r\n                    const link = document.createElement('link');\r\n                    link.rel = 'prefetch';\r\n                    link.href = resource;\r\n                    document.head.appendChild(link);\r\n                });\r\n            }, 2000);\r\n        });\r\n    }\r\n    \r\n    measureTimeToInteractive() {\r\n        // Measure time to interactive using Long Task API\r\n        if ('PerformanceObserver' in window && PerformanceObserver.supportedEntryTypes.includes('longtask')) {\r\n            let lastLongTask = 0;\r\n            const longTaskObserver = new PerformanceObserver((list) => {\r\n                const entries = list.getEntries();\r\n                entries.forEach(entry => {\r\n                    lastLongTask = entry.startTime + entry.duration;\r\n                });\r\n            });\r\n            longTaskObserver.observe({ entryTypes: ['longtask'] });\r\n            \r\n            // Estimate TTI after page load\r\n            window.addEventListener('load', () => {\r\n                setTimeout(() => {\r\n                    const tti = Math.max(lastLongTask, performance.timing.domInteractive - performance.timing.navigationStart);\r\n                    this.performanceMetrics.timeToInteractive = tti;\r\n                    this.logPerformanceMetric('TTI', tti);\r\n                }, 5000); // Wait 5 seconds after load\r\n            });\r\n        }\r\n    }\r\n    \r\n    logPerformanceMetric(name, value) {\r\n        console.log(`Performance Metric - ${name}: ${value}ms`);\r\n        \r\n        // Send to analytics if available\r\n        if (window.gtag) {\r\n            gtag('event', 'performance_metric', {\r\n                metric_name: name,\r\n                metric_value: value\r\n            });\r\n        }\r\n    }\r\n    \r\n    reportSlowResource(entry) {\r\n        console.warn('Slow resource detected:', entry.name, entry.duration);\r\n        \r\n        // Send to error tracking\r\n        if (window.Sentry) {\r\n            Sentry.captureMessage('Slow resource detected', {\r\n                level: 'warning',\r\n                extra: {\r\n                    name: entry.name,\r\n                    duration: entry.duration,\r\n                    entryType: entry.entryType\r\n                }\r\n            });\r\n        }\r\n    }\r\n    \r\n    reportLayoutShift(entry) {\r\n        console.warn('Layout shift detected:', entry.value);\r\n        \r\n        // Send to error tracking\r\n        if (window.Sentry) {\r\n            Sentry.captureMessage('Layout shift detected', {\r\n                level: 'warning',\r\n                extra: {\r\n                    value: entry.value,\r\n                    sources: entry.sources\r\n                }\r\n            });\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Component Loading Methods\r\n     */\r\n    loadChartComponent(container) {\r\n        // Placeholder for chart component\r\n        // TODO: Implement when charts.js is available\r\n        console.log('Chart component requested for:', container);\r\n        container.innerHTML = '<div class=\"skeleton\" style=\"height: 300px; border-radius: 8px;\"></div>';\r\n    }\r\n    \r\n    loadTableComponent(container) {\r\n        // Skip API call on landing page - not needed\r\n        if (window.location.pathname === '/' || !window.location.pathname.includes('/dashboard')) {\r\n            return;\r\n        }\r\n        \r\n        // Load table data and render\r\n        fetch('/api/data/table')\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to load table data');\r\n                }\r\n                return response.json();\r\n            })\r\n            .then(data => {\r\n                this.renderTable(container, data);\r\n            })\r\n            .catch(error => {\r\n                console.error('Error loading table data:', error);\r\n                container.innerHTML = '<p class=\"text-gray-500\">Unable to load data</p>';\r\n            });\r\n    }\r\n    \r\n    loadFormComponent(container) {\r\n        // Initialize form with basic validation\r\n        const forms = container.querySelectorAll('form');\r\n        forms.forEach(form => {\r\n            form.addEventListener('submit', (e) => {\r\n                // Basic validation\r\n                const inputs = form.querySelectorAll('input[required]');\r\n                let valid = true;\r\n                inputs.forEach(input => {\r\n                    if (!input.value.trim()) {\r\n                        valid = false;\r\n                        input.classList.add('error');\r\n                    } else {\r\n                        input.classList.remove('error');\r\n                    }\r\n                });\r\n                if (!valid) {\r\n                    e.preventDefault();\r\n                }\r\n            });\r\n        });\r\n    }\r\n    \r\n    renderTable(container, data) {\r\n        // Render table with data\r\n        const table = document.createElement('table');\r\n        table.className = 'wellness-table';\r\n        \r\n        // Build table HTML\r\n        let tableHTML = '<thead><tr>';\r\n        Object.keys(data[0] || {}).forEach(key => {\r\n            tableHTML += `<th>${key}</th>`;\r\n        });\r\n        tableHTML += '</tr></thead><tbody>';\r\n        \r\n        data.forEach(row => {\r\n            tableHTML += '<tr>';\r\n            Object.values(row).forEach(value => {\r\n                tableHTML += `<td>${value}</td>`;\r\n            });\r\n            tableHTML += '</tr>';\r\n        });\r\n        tableHTML += '</tbody>';\r\n        \r\n        table.innerHTML = tableHTML;\r\n        container.appendChild(table);\r\n    }\r\n    \r\n    /**\r\n     * Public API\r\n     */\r\n    getPerformanceMetrics() {\r\n        return this.performanceMetrics;\r\n    }\r\n    \r\n    optimizePage() {\r\n        // Run all optimizations\r\n        this.optimizeCriticalCSS();\r\n        this.setupLazyLoading();\r\n        this.optimizeImages();\r\n        this.setupResourcePreloading();\r\n    }\r\n    \r\n    preloadPage(url) {\r\n        // Preload a specific page\r\n        const link = document.createElement('link');\r\n        link.rel = 'prefetch';\r\n        link.href = url;\r\n        document.head.appendChild(link);\r\n    }\r\n}\r\n\r\n// Initialize performance optimization\r\nconst coraPerformance = new CORAPerformance();\r\n\r\n// Export for use in other modules\r\nwindow.CORAPerformance = coraPerformance;\r\n\r\n// Auto-optimize on DOM ready\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    coraPerformance.optimizePage();\r\n});\r\n\r\n// Cleanup on page unload\r\nwindow.addEventListener('beforeunload', () => {\r\n    if (typeof coraPerformance !== 'undefined' && coraPerformance.cleanup) {\r\n        coraPerformance.cleanup();\r\n    }\r\n});\r\n\r\n// Export for module systems\r\nif (typeof module !== 'undefined' && module.exports) {\r\n    module.exports = CORAPerformance;\r\n} "],
  "mappings": "wCAAA,IAAAA,EAAAC,EAAA,CAAAC,EAAAC,IAAA,CAYA,IAAMC,EAAN,KAAsB,CAClB,aAAc,CACV,KAAK,mBAAqB,CACtB,qBAAsB,EACtB,uBAAwB,EACxB,sBAAuB,EACvB,gBAAiB,EACjB,kBAAmB,CACvB,EAEA,KAAK,UAAY,IAAI,IACrB,KAAK,aAAe,CAAC,EACrB,KAAK,kBAAoB,IAAI,IAE7B,KAAK,KAAK,CACd,CAEA,MAAO,CAEH,KAAK,2BAA2B,EAGhC,KAAK,oBAAoB,EACzB,KAAK,iBAAiB,EACtB,KAAK,eAAe,EACpB,KAAK,wBAAwB,EAC7B,KAAK,cAAc,EACnB,KAAK,mBAAmB,EAGxB,KAAK,2BAA2B,EAGhC,KAAK,yBAAyB,CAClC,CAKA,4BAA6B,CAErB,wBAAyB,SAEL,IAAI,oBAAqBC,GAAS,CAClCA,EAAK,WAAW,EACxB,QAAQC,GAAS,CACrB,KAAK,mBAAmB,qBAAuBA,EAAM,UACrD,KAAK,qBAAqB,MAAOA,EAAM,SAAS,CACpD,CAAC,CACL,CAAC,EACW,QAAQ,CAAE,WAAY,CAAC,OAAO,CAAE,CAAC,EAGzB,IAAI,oBAAqBD,GAAS,CAClD,IAAME,EAAUF,EAAK,WAAW,EAC1BG,EAAYD,EAAQA,EAAQ,OAAS,CAAC,EAC5C,KAAK,mBAAmB,uBAAyBC,EAAU,UAC3D,KAAK,qBAAqB,MAAOA,EAAU,SAAS,CACxD,CAAC,EACW,QAAQ,CAAE,WAAY,CAAC,0BAA0B,CAAE,CAAC,EAG5C,IAAI,oBAAqBH,GAAS,CAClD,IAAII,EAAW,EACf,QAAWH,KAASD,EAAK,WAAW,EAC3BC,EAAM,iBACPG,GAAYH,EAAM,OAG1B,KAAK,mBAAmB,sBAAwBG,EAChD,KAAK,qBAAqB,MAAOA,CAAQ,CAC7C,CAAC,EACW,QAAQ,CAAE,WAAY,CAAC,cAAc,CAAE,CAAC,EAGhC,IAAI,oBAAqBJ,GAAS,CAClCA,EAAK,WAAW,EACxB,QAAQC,GAAS,CACrB,KAAK,mBAAmB,gBAAkBA,EAAM,gBAAkBA,EAAM,UACxE,KAAK,qBAAqB,MAAO,KAAK,mBAAmB,eAAe,CAC5E,CAAC,CACL,CAAC,EACW,QAAQ,CAAE,WAAY,CAAC,aAAa,CAAE,CAAC,GAIvD,KAAK,yBAAyB,CAClC,CAKA,qBAAsB,CAElB,IAAMI,EAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAoEjBC,EAAQ,SAAS,cAAc,OAAO,EAC5CA,EAAM,YAAcD,EACpB,SAAS,KAAK,aAAaC,EAAO,SAAS,KAAK,UAAU,CAI9D,CAKA,kBAAmB,CAEf,GAAI,yBAA0B,OAAQ,CAClC,IAAMC,EAAgB,IAAI,qBAAqB,CAACL,EAASM,IAAa,CAClEN,EAAQ,QAAQD,GAAS,CACrB,GAAIA,EAAM,eAAgB,CACtB,IAAMQ,EAAMR,EAAM,OAClB,KAAK,UAAUQ,CAAG,EAClBD,EAAS,UAAUC,CAAG,CAC1B,CACJ,CAAC,CACL,EAAG,CACC,WAAY,WACZ,UAAW,GACf,CAAC,EAGD,SAAS,iBAAiB,eAAe,EAAE,QAAQA,GAAO,CACtDF,EAAc,QAAQE,CAAG,CAC7B,CAAC,CACL,CAGA,KAAK,0BAA0B,CACnC,CAKA,gBAAiB,CAET,KAAK,aAAa,GAClB,KAAK,oBAAoB,EAI7B,SAAS,iBAAiB,KAAK,EAAE,QAAQA,GAAO,CAEvC,KAAK,eAAeA,CAAG,IACxBA,EAAI,QAAU,QAIlBA,EAAI,SAAW,QAGfA,EAAI,iBAAiB,QAAS,IAAM,CAChC,KAAK,iBAAiBA,CAAG,CAC7B,CAAC,CACL,CAAC,CACL,CAKA,yBAA0B,CAEI,CAEtB,CAAE,KAAM,uFAAwF,GAAI,OAAQ,EAC5G,CAAE,KAAM,qCAAsC,GAAI,OAAQ,CAC9D,EAEkB,QAAQC,GAAY,CAClC,KAAK,gBAAgBA,EAAS,KAAMA,EAAS,EAAE,CACnD,CAAC,EAGD,KAAK,wBAAwB,CACjC,CAKA,eAAgB,CAGZ,QAAQ,IAAI,0DAA0D,EAGtE,SAAS,iBAAiB,oCAAoC,EAAE,QAAQC,GAAQ,CAC5EA,EAAK,aAAa,QAAS,OAAO,EAClCA,EAAK,aAAa,SAAU,kBAAkB,CAClD,CAAC,CACL,CAKA,oBAAqB,CACb,kBAAmB,WACnB,OAAO,iBAAiB,OAAQ,IAAM,CAClC,UAAU,cAAc,SAAS,kBAAkB,EAC9C,KAAKC,GAAgB,CAClB,QAAQ,IAAI,kBAAmBA,CAAY,EAE3C,YAAY,IAAM,CACdA,EAAa,OAAO,CACxB,EAAG,GAAK,CACZ,CAAC,EACA,MAAMC,GAAqB,CACxB,QAAQ,IAAI,2BAA4BA,CAAiB,CAE7D,CAAC,CACT,CAAC,CAET,CAKA,4BAA6B,CAEzB,IAAMC,EAAoB,IAAI,qBAAsBZ,GAAY,CAC5DA,EAAQ,QAAQD,GAAS,CACjBA,EAAM,gBACN,KAAK,kBAAkBA,EAAM,MAAM,CAE3C,CAAC,CACL,EAAG,CAAE,UAAW,EAAI,CAAC,EAGrB,SAAS,iBAAiB,2CAA2C,EAAE,QAAQc,GAAa,CACxFD,EAAkB,QAAQC,CAAS,CACvC,CAAC,CACL,CAKA,0BAA2B,CAEE,IAAI,oBAAqBf,GAAS,CACvDA,EAAK,WAAW,EAAE,QAAQC,GAAS,CAC3BA,EAAM,SAAW,KACjB,KAAK,mBAAmBA,CAAK,CAErC,CAAC,CACL,CAAC,EACgB,QAAQ,CAAE,WAAY,CAAC,UAAU,CAAE,CAAC,EAGzB,IAAI,oBAAqBD,GAAS,CAC1DA,EAAK,WAAW,EAAE,QAAQC,GAAS,CAC3BA,EAAM,MAAQ,IACd,KAAK,kBAAkBA,CAAK,CAEpC,CAAC,CACL,CAAC,EACmB,QAAQ,CAAE,WAAY,CAAC,cAAc,CAAE,CAAC,CAChE,CAKA,gBAAgBe,EAAMC,EAAI,CACtB,IAAMN,EAAO,SAAS,cAAc,MAAM,EAC1CA,EAAK,IAAM,UACXA,EAAK,KAAOK,EACZL,EAAK,GAAKM,EACV,SAAS,KAAK,YAAYN,CAAI,CAClC,CAEA,UAAUF,EAAK,CACX,IAAMS,EAAMT,EAAI,QAAQ,IACpBS,IACAT,EAAI,IAAMS,EACVT,EAAI,gBAAgB,UAAU,EAC9BA,EAAI,UAAU,OAAO,MAAM,EAEnC,CAEA,cAAe,CACX,IAAMU,EAAS,SAAS,cAAc,QAAQ,EAC9C,OAAAA,EAAO,MAAQ,EACfA,EAAO,OAAS,EACTA,EAAO,UAAU,YAAY,EAAE,QAAQ,iBAAiB,IAAM,CACzE,CAEA,qBAAsB,CAGlB,QAAQ,IAAI,yDAAyD,CACzE,CAEA,eAAeC,EAAS,CAEpB,OADaA,EAAQ,sBAAsB,EAC/B,IAAM,OAAO,WAC7B,CAEA,iBAAiBX,EAAK,CAEdA,EAAI,IAAI,SAAS,OAAO,EACxBA,EAAI,IAAMA,EAAI,IAAI,QAAQ,QAAS,MAAM,EAEzCA,EAAI,IAAM,gCAElB,CAEA,2BAA4B,CAExB,IAAMY,EAAa,SAAS,iBAAiB,uBAAuB,EAC9DP,EAAoB,IAAI,qBAAsBZ,GAAY,CAC5DA,EAAQ,QAAQD,GAAS,CACjBA,EAAM,iBACN,KAAK,cAAcA,EAAM,MAAM,EAC/Ba,EAAkB,UAAUb,EAAM,MAAM,EAEhD,CAAC,CACL,CAAC,EAEDoB,EAAW,QAAQN,GAAa,CAC5BD,EAAkB,QAAQC,CAAS,CACvC,CAAC,CACL,CAEA,cAAcA,EAAW,CAGrB,OAFsBA,EAAU,QAAQ,cAEjB,CACnB,IAAK,QACD,KAAK,mBAAmBA,CAAS,EACjC,MACJ,IAAK,QACD,KAAK,mBAAmBA,CAAS,EACjC,MACJ,IAAK,OACD,KAAK,kBAAkBA,CAAS,EAChC,KACR,CACJ,CAEA,kBAAkBA,EAAW,CAGzB,IAAMO,EAAmB,IAAM,CAC3BP,EAAU,MAAM,WAAa,YAC7BA,EAAU,iBAAiB,gBAAiB,IAAM,CAC9CA,EAAU,MAAM,WAAa,MACjC,EAAG,CAAE,KAAM,EAAK,CAAC,CACrB,EAGAA,EAAU,iBAAiB,aAAcO,CAAgB,EACzDP,EAAU,iBAAiB,QAASO,CAAgB,CACxD,CAEA,yBAA0B,CAEtB,IAAMC,EAAkB,CACpB,aACA,YACA,UACJ,EAGA,OAAO,iBAAiB,OAAQ,IAAM,CAClC,WAAW,IAAM,CACbA,EAAgB,QAAQb,GAAY,CAChC,IAAMC,EAAO,SAAS,cAAc,MAAM,EAC1CA,EAAK,IAAM,WACXA,EAAK,KAAOD,EACZ,SAAS,KAAK,YAAYC,CAAI,CAClC,CAAC,CACL,EAAG,GAAI,CACX,CAAC,CACL,CAEA,0BAA2B,CAEvB,GAAI,wBAAyB,QAAU,oBAAoB,oBAAoB,SAAS,UAAU,EAAG,CACjG,IAAIa,EAAe,EACM,IAAI,oBAAqBxB,GAAS,CACvCA,EAAK,WAAW,EACxB,QAAQC,GAAS,CACrBuB,EAAevB,EAAM,UAAYA,EAAM,QAC3C,CAAC,CACL,CAAC,EACgB,QAAQ,CAAE,WAAY,CAAC,UAAU,CAAE,CAAC,EAGrD,OAAO,iBAAiB,OAAQ,IAAM,CAClC,WAAW,IAAM,CACb,IAAMwB,EAAM,KAAK,IAAID,EAAc,YAAY,OAAO,eAAiB,YAAY,OAAO,eAAe,EACzG,KAAK,mBAAmB,kBAAoBC,EAC5C,KAAK,qBAAqB,MAAOA,CAAG,CACxC,EAAG,GAAI,CACX,CAAC,CACL,CACJ,CAEA,qBAAqBC,EAAMC,EAAO,CAC9B,QAAQ,IAAI,wBAAwBD,CAAI,KAAKC,CAAK,IAAI,EAGlD,OAAO,MACP,KAAK,QAAS,qBAAsB,CAChC,YAAaD,EACb,aAAcC,CAClB,CAAC,CAET,CAEA,mBAAmB1B,EAAO,CACtB,QAAQ,KAAK,0BAA2BA,EAAM,KAAMA,EAAM,QAAQ,EAG9D,OAAO,QACP,OAAO,eAAe,yBAA0B,CAC5C,MAAO,UACP,MAAO,CACH,KAAMA,EAAM,KACZ,SAAUA,EAAM,SAChB,UAAWA,EAAM,SACrB,CACJ,CAAC,CAET,CAEA,kBAAkBA,EAAO,CACrB,QAAQ,KAAK,yBAA0BA,EAAM,KAAK,EAG9C,OAAO,QACP,OAAO,eAAe,wBAAyB,CAC3C,MAAO,UACP,MAAO,CACH,MAAOA,EAAM,MACb,QAASA,EAAM,OACnB,CACJ,CAAC,CAET,CAKA,mBAAmB2B,EAAW,CAG1B,QAAQ,IAAI,iCAAkCA,CAAS,EACvDA,EAAU,UAAY,yEAC1B,CAEA,mBAAmBA,EAAW,CAEtB,OAAO,SAAS,WAAa,KAAO,CAAC,OAAO,SAAS,SAAS,SAAS,YAAY,GAKvF,MAAM,iBAAiB,EAClB,KAAKC,GAAY,CACd,GAAI,CAACA,EAAS,GACV,MAAM,IAAI,MAAM,2BAA2B,EAE/C,OAAOA,EAAS,KAAK,CACzB,CAAC,EACA,KAAKC,GAAQ,CACV,KAAK,YAAYF,EAAWE,CAAI,CACpC,CAAC,EACA,MAAMC,GAAS,CACZ,QAAQ,MAAM,4BAA6BA,CAAK,EAChDH,EAAU,UAAY,kDAC1B,CAAC,CACT,CAEA,kBAAkBA,EAAW,CAEXA,EAAU,iBAAiB,MAAM,EACzC,QAAQI,GAAQ,CAClBA,EAAK,iBAAiB,SAAWC,GAAM,CAEnC,IAAMC,EAASF,EAAK,iBAAiB,iBAAiB,EAClDG,EAAQ,GACZD,EAAO,QAAQE,GAAS,CACfA,EAAM,MAAM,KAAK,EAIlBA,EAAM,UAAU,OAAO,OAAO,GAH9BD,EAAQ,GACRC,EAAM,UAAU,IAAI,OAAO,EAInC,CAAC,EACID,GACDF,EAAE,eAAe,CAEzB,CAAC,CACL,CAAC,CACL,CAEA,YAAYL,EAAWE,EAAM,CAEzB,IAAMO,EAAQ,SAAS,cAAc,OAAO,EAC5CA,EAAM,UAAY,iBAGlB,IAAIC,EAAY,cAChB,OAAO,KAAKR,EAAK,CAAC,GAAK,CAAC,CAAC,EAAE,QAAQS,GAAO,CACtCD,GAAa,OAAOC,CAAG,OAC3B,CAAC,EACDD,GAAa,uBAEbR,EAAK,QAAQU,GAAO,CAChBF,GAAa,OACb,OAAO,OAAOE,CAAG,EAAE,QAAQb,GAAS,CAChCW,GAAa,OAAOX,CAAK,OAC7B,CAAC,EACDW,GAAa,OACjB,CAAC,EACDA,GAAa,WAEbD,EAAM,UAAYC,EAClBV,EAAU,YAAYS,CAAK,CAC/B,CAKA,uBAAwB,CACpB,OAAO,KAAK,kBAChB,CAEA,cAAe,CAEX,KAAK,oBAAoB,EACzB,KAAK,iBAAiB,EACtB,KAAK,eAAe,EACpB,KAAK,wBAAwB,CACjC,CAEA,YAAYI,EAAK,CAEb,IAAM9B,EAAO,SAAS,cAAc,MAAM,EAC1CA,EAAK,IAAM,WACXA,EAAK,KAAO8B,EACZ,SAAS,KAAK,YAAY9B,CAAI,CAClC,CACJ,EAGM+B,EAAkB,IAAI3C,EAG5B,OAAO,gBAAkB2C,EAGzB,SAAS,iBAAiB,mBAAoB,IAAM,CAChDA,EAAgB,aAAa,CACjC,CAAC,EAGD,OAAO,iBAAiB,eAAgB,IAAM,CACtC,OAAOA,GAAoB,aAAeA,EAAgB,SAC1DA,EAAgB,QAAQ,CAEhC,CAAC,EAGG,OAAO5C,GAAW,aAAeA,EAAO,UACxCA,EAAO,QAAUC",
  "names": ["require_performance", "__commonJSMin", "exports", "module", "CORAPerformance", "list", "entry", "entries", "lastEntry", "clsValue", "criticalStyles", "style", "imageObserver", "observer", "img", "resource", "link", "registration", "registrationError", "componentObserver", "component", "href", "as", "src", "canvas", "element", "components", "animationHandler", "likelyResources", "lastLongTask", "tti", "name", "value", "container", "response", "data", "error", "form", "e", "inputs", "valid", "input", "table", "tableHTML", "key", "row", "url", "coraPerformance"]
}
