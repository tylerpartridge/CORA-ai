{
  "version": 3,
  "sources": ["../web-vitals-monitoring.js"],
  "sourcesContent": ["/**\n * Core Web Vitals Monitoring for SEO\n * Tracks LCP, INP (replacing FID), and CLS\n */\n\n// Track Largest Contentful Paint (LCP)\nconst lcpObserver = new PerformanceObserver((list) => {\n    const entries = list.getEntries();\n    const lastEntry = entries[entries.length - 1];\n    \n    // Send to analytics\n    if (window.gtag) {\n        gtag('event', 'web_vitals', {\n            metric_name: 'LCP',\n            value: Math.round(lastEntry.renderTime || lastEntry.loadTime),\n            metric_rating: getRating('LCP', lastEntry.renderTime || lastEntry.loadTime)\n        });\n    }\n    \n    // Log for debugging\n    console.log('LCP:', Math.round(lastEntry.renderTime || lastEntry.loadTime), 'ms');\n});\n\n// Observe LCP\ntry {\n    lcpObserver.observe({ type: 'largest-contentful-paint', buffered: true });\n} catch (e) {\n    console.log('LCP observation not supported');\n}\n\n// Track Interaction to Next Paint (INP) - replacing FID\nlet inpValue = 0;\nconst inpObserver = new PerformanceObserver((list) => {\n    list.getEntries().forEach((entry) => {\n        if (entry.interactionId) {\n            const inp = entry.processingStart - entry.startTime;\n            \n            // Keep track of the worst INP\n            if (inp > inpValue) {\n                inpValue = inp;\n                \n                // Send to analytics\n                if (window.gtag) {\n                    gtag('event', 'web_vitals', {\n                        metric_name: 'INP',\n                        value: Math.round(inp),\n                        metric_rating: getRating('INP', inp)\n                    });\n                }\n                \n                // Log for debugging\n                console.log('INP:', Math.round(inp), 'ms');\n            }\n        }\n    });\n});\n\n// Observe INP\ntry {\n    inpObserver.observe({ type: 'event', buffered: true });\n} catch (e) {\n    console.log('INP observation not supported');\n}\n\n// Track Cumulative Layout Shift (CLS)\nlet clsValue = 0;\nconst clsObserver = new PerformanceObserver((list) => {\n    list.getEntries().forEach((entry) => {\n        if (!entry.hadRecentInput) {\n            clsValue += entry.value;\n            \n            // Send to analytics\n            if (window.gtag) {\n                gtag('event', 'web_vitals', {\n                    metric_name: 'CLS',\n                    value: clsValue.toFixed(3),\n                    metric_rating: getRating('CLS', clsValue)\n                });\n            }\n            \n            // Log for debugging\n            console.log('CLS:', clsValue.toFixed(3));\n        }\n    });\n});\n\n// Observe CLS\ntry {\n    clsObserver.observe({ type: 'layout-shift', buffered: true });\n} catch (e) {\n    console.log('CLS observation not supported');\n}\n\n// Helper function to rate metrics\nfunction getRating(metric, value) {\n    const thresholds = {\n        LCP: { good: 2500, poor: 4000 },\n        INP: { good: 200, poor: 500 },\n        CLS: { good: 0.1, poor: 0.25 }\n    };\n    \n    const threshold = thresholds[metric];\n    if (value <= threshold.good) return 'good';\n    if (value <= threshold.poor) return 'needs-improvement';\n    return 'poor';\n}\n\n// Performance optimization techniques\ndocument.addEventListener('DOMContentLoaded', function() {\n    // 1. Preload critical resources\n    const criticalResources = [\n        '/static/css/unified-design-system.css',\n        \n        '/static/images/logos/cora-logo.png'\n    ];\n    \n    criticalResources.forEach(resource => {\n        const link = document.createElement('link');\n        link.rel = 'preload';\n        link.href = resource;\n        \n        if (resource.endsWith('.css')) {\n            link.as = 'style';\n        } else if (resource.endsWith('.js')) {\n            link.as = 'script';\n        } else if (resource.match(/\\.(png|jpg|webp|svg)$/)) {\n            link.as = 'image';\n        }\n        \n        document.head.appendChild(link);\n    });\n    \n    // 2. Lazy load images\n    if ('IntersectionObserver' in window) {\n        const imageObserver = new IntersectionObserver((entries, observer) => {\n            entries.forEach(entry => {\n                if (entry.isIntersecting) {\n                    const img = entry.target;\n                    img.src = img.dataset.src;\n                    img.classList.remove('lazy');\n                    observer.unobserve(img);\n                }\n            });\n        });\n        \n        document.querySelectorAll('img[data-src]').forEach(img => {\n            imageObserver.observe(img);\n        });\n    }\n    \n    // 3. Optimize font loading\n    if ('fonts' in document) {\n        Promise.all([\n            document.fonts.load('400 1em Poppins'),\n            document.fonts.load('600 1em Poppins'),\n            document.fonts.load('400 1em Inter')\n        ]).then(() => {\n            document.documentElement.classList.add('fonts-loaded');\n        });\n    }\n    \n    // 4. Reduce CLS by setting dimensions\n    document.querySelectorAll('img:not([width])').forEach(img => {\n        if (img.naturalWidth) {\n            img.width = img.naturalWidth;\n            img.height = img.naturalHeight;\n        }\n    });\n});\n\n// Report final metrics when page is about to unload\nwindow.addEventListener('visibilitychange', () => {\n    if (document.visibilityState === 'hidden') {\n        // Send final metrics\n        if (window.gtag) {\n            gtag('event', 'web_vitals_final', {\n                lcp_final: Math.round(performance.getEntriesByType('largest-contentful-paint').pop()?.renderTime || 0),\n                inp_final: Math.round(inpValue),\n                cls_final: clsValue.toFixed(3)\n            });\n        }\n    }\n});\n\n// Export metrics for debugging\nwindow.getWebVitals = function() {\n    return {\n        LCP: Math.round(performance.getEntriesByType('largest-contentful-paint').pop()?.renderTime || 0),\n        INP: Math.round(inpValue),\n        CLS: clsValue.toFixed(3)\n    };\n};"],
  "mappings": "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",
  "names": ["lcpObserver", "list", "entries", "lastEntry", "getRating", "inpValue", "inpObserver", "entry", "inp", "clsValue", "clsObserver", "metric", "value", "threshold", "resource", "link", "imageObserver", "observer", "img", "_a"]
}

