%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2376 738
%%HiResBoundingBox: 0 0 2376 738
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2376 738 re
W
q
[0.24 0 0 -0.24 0 738] cm
q
0 0 9896.875 3071.875 re
W*
q
[26.041529 0 0 26.041529 260.42496 260.41528] cm
/DeviceRGB {} CS
[0 0 0] SC
/DeviceRGB {} cs
[0 0 0] sc
82.868805 76.874924 m
82.658302 77.068344 82.428337 77.235153 82.214294 77.423256 c
81.750824 77.82785 81.282051 78.223572 80.799126 78.606873 c
80.342735 78.970657 79.882805 79.320244 79.412262 79.66095 c
78.961182 79.987465 78.503021 80.301559 78.037788 80.608559 c
77.53894 80.936852 77.038322 81.256264 76.52533 81.559715 c
76.030022 81.854286 75.525864 82.131111 75.018173 82.402618 c
74.528175 82.663475 74.03817 82.920784 73.53756 83.160347 c
72.953804 83.440727 72.359436 83.696259 71.761528 83.946472 c
71.31929 84.13102 70.880585 84.315575 70.431274 84.482384 c
69.739609 84.741463 69.037331 84.970383 68.32975 85.188652 c
67.951195 85.305771 67.576172 85.426437 67.192314 85.531136 c
66.412201 85.745857 65.621475 85.925087 64.821907 86.090118 c
64.482269 86.159325 64.146164 86.235626 63.80476 86.295967 c
62.987503 86.441475 62.1614 86.549721 61.32822 86.641998 c
60.97443 86.681038 60.624176 86.725403 60.268616 86.755569 c
59.98912 86.778641 59.716702 86.828323 59.433666 86.846069 c
58.627022 86.897537 57.823917 86.922379 57.024349 86.922379 c
49.055199 86.922379 41.519444 84.46286 35.175964 79.994568 c
34.87878 79.788719 34.578056 79.591743 34.286179 79.377029 c
33.681194 78.924515 33.099209 78.436516 32.51899 77.944969 c
31.960001 77.478264 31.406317 77.009789 30.872093 76.509369 c
30.534222 76.189949 30.210503 75.852783 29.883245 75.519173 c
29.437469 75.070213 28.966927 74.649651 28.540607 74.175842 c
28.269957 73.874176 28.043531 73.547653 27.783495 73.240662 c
27.716274 73.159035 27.636671 73.089828 27.56945 73.008194 c
27.544685 72.978027 27.539377 72.940765 27.516382 72.910599 c
20.909328 64.910965 17.840189 54.852859 18.935173 44.356445 c
20.04254 33.767754 25.566992 24.414145 33.58567 18.153563 c
33.608669 18.135817 33.631664 18.118071 33.652893 18.100327 c
39.026981 13.923055 45.503132 11.121053 52.559502 10.308313 c
62.018112 9.193901 71.446655 11.681808 79.099159 17.09416 c
79.120384 17.108356 79.141617 17.120779 79.161072 17.134975 c
80.01194 17.740093 80.825661 18.401999 81.630539 19.079872 c
81.878189 19.287495 82.136459 19.479145 82.378807 19.693865 c
82.529167 19.826954 82.69368 19.936975 82.8405 20.071842 c
83.585236 20.753265 84.673141 20.771011 85.384262 20.114431 c
86.109535 19.445429 86.190903 18.323917 85.562927 17.566189 c
76.275902 6.301398 62.858368 0 48.386532 0 c
47.376457 0 46.362846 0.033716 45.342159 0.092276 c
21.289654 1.549175 1.850589 20.826021 0.129394 44.927849 c
-0.845301 58.575848 3.711532 71.577911 12.9561 81.543739 c
22.073301 91.365829 34.974304 97 48.347614 97 c
62.822987 97 76.397964 90.576157 85.591232 79.373474 c
86.205055 78.624619 86.118378 77.515533 85.393105 76.846527 c
85.391335 76.842979 l
84.680214 76.181076 83.594078 76.207695 82.868805 76.874924 c
h
f
32.186787 27.813219 m
31.903402 28.15719 31.947681 28.670502 32.284203 28.982721 c
32.287743 28.982721 l
32.606552 29.280828 33.093624 29.266718 33.438999 28.970373 c
34.627449 27.892597 35.911545 26.924187 37.280651 26.073961 c
37.347958 26.031626 37.41349 25.98929 37.482563 25.948719 c
38.075905 25.588873 38.683414 25.251957 39.305092 24.937975 c
39.430843 24.874472 39.554825 24.809206 39.680576 24.745703 c
40.249123 24.468761 40.830063 24.216516 41.421631 23.980146 c
41.602287 23.907825 41.781178 23.831974 41.963608 23.763182 c
42.496727 23.563854 43.038704 23.387459 43.587761 23.221647 c
43.839268 23.144033 44.090775 23.064655 44.345821 22.995861 c
44.813408 22.868856 45.288078 22.764782 45.766293 22.662474 c
46.120525 22.586624 46.472988 22.50901 46.830761 22.447271 c
47.192078 22.387297 47.556938 22.341434 47.921799 22.29557 c
48.423038 22.230305 48.924274 22.172094 49.429058 22.135052 c
49.503445 22.129759 49.576065 22.115648 49.650452 22.11212 c
49.756721 22.105064 49.859451 22.115648 49.965721 22.110355 c
50.440392 22.085661 50.913292 22.04509 51.391506 22.04509 c
51.754593 22.04509 52.11237 22.087425 52.475456 22.101536 c
52.711021 22.11212 52.943043 22.122704 53.176838 22.138578 c
53.980946 22.193262 54.776199 22.284986 55.566135 22.410229 c
55.775135 22.443743 55.984131 22.471966 56.191357 22.510773 c
57.036201 22.666002 57.868649 22.863564 58.692238 23.098169 c
58.819763 23.135214 58.949059 23.161673 59.07481 23.20048 c
63.69046 24.588711 67.900513 27.18878 71.18425 30.820761 c
76.286972 36.460121 78.655014 43.759361 77.852676 51.372589 c
76.98304 59.63142 72.156616 66.747208 65.364212 70.966591 c
65.206573 71.063606 65.047173 71.157097 64.887764 71.25235 c
63.348625 72.164314 61.731552 72.936928 60.017067 73.527847 c
59.986958 73.538437 59.956848 73.552544 59.926739 73.563126 c
59.173996 73.818901 58.407082 74.023521 57.625999 74.212265 c
57.130074 74.333977 56.627064 74.425705 56.12228 74.519196 c
55.578533 74.616211 55.059586 74.785545 54.506981 74.849052 c
52.526821 75.06778 50.551975 75.060722 48.609009 74.85434 c
47.980247 74.79084 47.36211 74.676186 46.742203 74.568581 c
46.478302 74.520958 46.210854 74.499786 45.948723 74.445107 c
41.302963 73.489044 36.970699 71.291153 33.435459 68.096634 c
33.260113 67.955521 33.058201 67.867325 32.854515 67.867325 c
32.649063 67.867325 32.445377 67.937881 32.287743 68.082527 c
31.954765 68.385925 31.921114 68.881592 32.185017 69.229095 c
32.236382 69.290833 32.284203 69.354332 32.337337 69.416077 c
32.997982 70.202797 33.702904 70.9366 34.421997 71.649239 c
34.643391 71.866203 34.85593 72.097282 35.082638 72.30719 c
35.631699 72.820503 36.216183 73.284424 36.797123 73.757164 c
37.225746 74.102898 37.638428 74.469803 38.082989 74.79084 c
38.226452 74.894913 38.380543 74.981346 38.52401 75.081894 c
42.004345 77.516151 45.929241 79.255409 50.077305 80.197357 c
50.280987 80.243225 50.481129 80.299667 50.686584 80.34024 c
51.50309 80.509583 52.331993 80.627762 53.16267 80.733604 c
53.580662 80.786522 53.996887 80.839439 54.418423 80.87648 c
55.135742 80.939987 55.856606 80.973495 56.579243 80.991142 c
57.149555 81.003487 57.721642 81.003487 58.297268 80.98761 c
58.910091 80.969971 59.524685 80.954094 60.132195 80.902939 c
60.381927 80.881775 60.62812 80.850021 60.876083 80.823563 c
61.63591 80.742424 62.39397 80.641876 63.143169 80.509583 c
63.384048 80.467247 63.621384 80.41433 63.862263 80.364937 c
64.58844 80.218529 65.311073 80.054482 66.023079 79.858681 c
66.310013 79.779305 66.591621 79.691101 66.875008 79.604668 c
67.514404 79.410637 68.148476 79.202492 68.773697 78.971413 c
69.12793 78.839111 69.475075 78.696236 69.823997 78.55159 c
70.360657 78.331093 70.893776 78.100021 71.418045 77.851303 c
71.821869 77.659027 72.218605 77.452644 72.611809 77.244499 c
73.068764 77.002838 73.522186 76.755882 73.966743 76.493057 c
74.381195 76.247864 74.788567 75.990326 75.19062 75.729263 c
75.610382 75.455849 76.024841 75.173622 76.432205 74.880806 c
76.809464 74.609154 77.179634 74.328682 77.546265 74.041161 c
77.983742 73.697189 78.414139 73.340874 78.8339 72.972206 c
85.103821 67.50042 89.28022 59.700214 89.912521 50.926308 c
90.571396 41.771385 87.491348 33.046871 81.244453 26.363249 c
80.512962 25.580053 79.740738 24.844484 78.94017 24.142431 c
78.718773 23.948397 78.483215 23.775528 78.25827 23.586786 c
77.587006 23.029375 76.912193 22.479023 76.20018 21.979824 c
76.154129 21.948072 76.104538 21.919849 76.058487 21.888098 c
70.61039 18.099125 64.065948 16 57.340843 16 c
47.571106 15.989436 38.401798 20.29701 32.186787 27.813219 c
h
f
Q
q
[118.284546 0 0 118.284546 3018.5369 -8.970705] cm
/DeviceRGB {} CS
[0 0 0] SC
/DeviceRGB {} cs
[0 0 0] sc
12.76 18.5 m
11.480001 19.6 9.860001 20.200001 8.06 20.200001 c
4.42 20.200001 0.900001 17.240002 0.900001 13.000001 c
0.900001 8.76 4.420001 5.800001 8.06 5.800001 c
9.84 5.800001 11.440001 6.400001 12.700001 7.460001 c
11.68 8.620001 l
10.700001 7.840001 9.440001 7.380001 8.18 7.380001 c
5.32 7.380001 2.62 9.700001 2.62 13.000001 c
2.62 16.300001 5.320001 18.620001 8.18 18.620001 c
9.46 18.620001 10.74 18.140001 11.72 17.34 c
12.76 18.5 l
h
21.52 5.8 m
25.16 5.8 28.68 8.76 28.68 13 c
28.68 17.24 25.16 20.200001 21.52 20.200001 c
17.860001 20.200001 14.360001 17.240002 14.360001 13.000001 c
14.360001 8.76 17.860001 5.800001 21.52 5.800001 c
21.52 5.8 l
h
21.52 18.620001 m
24.26 18.620001 26.960001 16.300001 26.960001 13.000001 c
26.960001 9.700001 24.26 7.380001 21.52 7.380001 c
18.76 7.380001 16.08 9.700001 16.08 13.000001 c
16.08 16.300001 18.76 18.620001 21.52 18.620001 c
h
41.060001 20 m
39.260002 20 l
35.720001 14.96 l
35.34 14.96 l
32.439999 14.96 l
32.439999 20 l
30.779999 20 l
30.779999 6 l
35.34 6 l
38.48 6 40.299999 7.92 40.299999 10.520001 c
40.299999 12.520001 39.219997 14.08 37.299999 14.68 c
41.060001 20 l
h
32.439999 7.56 m
32.439999 13.48 l
35.299999 13.48 l
37.32 13.48 38.639999 12.44 38.639999 10.52 c
38.639999 8.58 37.32 7.56 35.299999 7.56 c
32.439999 7.56 l
32.439999 7.56 l
h
54.18 20 m
52.740002 16.700001 l
45.260002 16.700001 l
43.820004 20 l
42.060005 20 l
48.300003 6 l
49.680004 6 l
55.940002 20 l
54.180004 20 l
54.18 20 l
h
45.880001 15.3 m
52.120003 15.3 l
49.000004 8.18 l
45.880001 15.3 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
