name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual trigger

env:
  PYTHON_VERSION: '3.12'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('data/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r data/requirements.txt
        pip install pytest pytest-cov pytest-asyncio
        
    - name: Run tests with coverage
      run: |
        pytest --cov=app --cov=tools/auth --cov-report=xml --cov-report=term-missing
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: Lint & Security Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black bandit safety
        
    - name: Run flake8
      run: flake8 app.py tools/auth.py tests/ --max-line-length=120 --ignore=E501,W503
      continue-on-error: true
      
    - name: Check formatting with black
      run: black --check app.py tools/auth.py tests/
      continue-on-error: true
      
    - name: Security check with bandit
      run: bandit -r app.py tools/auth.py -ll
      continue-on-error: true
      
    - name: Check dependencies for vulnerabilities
      run: safety check --json
      continue-on-error: true

  build:
    name: Build & Validate
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r data/requirements.txt
        
    - name: Check imports
      run: |
        python -c "import app; print('App imports successfully')"
        python -c "from tools.auth import *; print('Auth module imports successfully')"
        
    - name: Validate database
      run: |
        python -c "
        from tools.auth import Base, engine
        Base.metadata.create_all(bind=engine)
        print('Database schema validated')
        "
        
    - name: Check file sizes
      run: |
        if [ -f "tools/check_sizes.sh" ]; then
          chmod +x tools/check_sizes.sh
          ./tools/check_sizes.sh
        else
          python tools/check_sizes.py
        fi

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Deploy notification
      run: |
        echo "ðŸš€ Ready to deploy to production!"
        echo "Manual deployment required via DigitalOcean console"
        echo "Run: ssh root@coraai.tech 'cd /var/www/cora && git pull && pm2 restart cora'"
        
    # Future: Add automated deployment
    # - name: Deploy to DigitalOcean
    #   uses: appleboy/ssh-action@v0.1.5
    #   with:
    #     host: ${{ secrets.DROPLET_IP }}
    #     username: root
    #     key: ${{ secrets.SSH_PRIVATE_KEY }}
    #     script: |
    #       cd /var/www/cora
    #       git pull origin main
    #       source venv/bin/activate
    #       pip install -r data/requirements.txt
    #       pm2 restart cora